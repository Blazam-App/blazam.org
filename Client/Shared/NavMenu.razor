@{

}
<Bar Mode="BarMode.VerticalInline"
     CollapseMode="BarCollapseMode.Small"
     Breakpoint="Breakpoint.Desktop"
     NavigationBreakpoint="Breakpoint.Tablet"
     ThemeContrast="ThemeContrast.Dark">
    <BarBrand>
        <BarItem>
            <BarLink TextColor=TextColor.Light To="/home">
                <Image Class="app-icon" Source="/logo.png" />
                <Div Margin=Margin.Is2.OnX TextAlignment="TextAlignment.Center">
                    Blazam
                </Div>
            </BarLink>
        </BarItem>
    </BarBrand>
    <BarToggler />

    <BarMenu>
        <BarStart>
            <BarItem>
                <BarLink Clicked=@(()=>{Layout.CurrentPage=Page.Index;})>
                    <BarIcon IconName="IconName.Dashboard" />
                    @AppLocalization["Home"]
                </BarLink>
            </BarItem>
            <BarItem>
                <BarLink Clicked=@(()=>{
                         Layout.CurrentPage=Page.Features;
                })>
                    <BarIcon IconName="IconName.Wrench" />
                    @AppLocalization["Features"]
                </BarLink>
            </BarItem>
            <BarItem>
                <BarLink Clicked=@(()=>{Layout.CurrentPage=Page.Download;})>
                    <BarIcon IconName="IconName.Download" />
                    @AppLocalization["Download"]
                </BarLink>
            </BarItem>
            
            <BarItem>

                <BarDropdown>
                    <BarDropdownToggle>

                        <BarIcon IconName="IconName.FolderPlus" />
                        @AppLocalization["Install"]
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem Clicked=@(()=>{Layout.CurrentPage=Page.MSIInstall;}) >@AppLocalization["MSI"]</BarDropdownItem>

                        <BarDropdownItem Clicked=@(()=>{Layout.CurrentPage=Page.ManualInstall;}) >@AppLocalization["Manual"]</BarDropdownItem>




                    </BarDropdownMenu>
                </BarDropdown>




            </BarItem>
            @*            <BarItem>

                <BarDropdown>
                    <BarDropdownToggle>

                        <BarIcon IconName="IconName.User" />
                        @AppLocalization["Users"]
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem To="/users/search" Match="Match.Prefix"><Icon Name="IconName.Search" />@AppLocalization["Search Users"]</BarDropdownItem>

                        <BarDropdownItem To="/users/create" Match="Match.Prefix"><Icon Name="IconName.UserPlus" />@AppLocalization["Create User"]</BarDropdownItem>




                    </BarDropdownMenu>
                </BarDropdown>




            </BarItem>



            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>

                        <BarIcon IconName="@("fa-user-group")" />
                        @AppLocalization["Groups"]
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem To="/groups/search" Match="Match.Prefix"><Icon Name="IconName.Search" />@AppLocalization["Search Groups"]</BarDropdownItem>

                        <BarDropdownItem To="/groups/create" Match="Match.Prefix"><Icon Name="IconName.PlusCircle" />@AppLocalization["Create Group"]</BarDropdownItem>




                    </BarDropdownMenu>
                </BarDropdown>




            </BarItem>





            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>

                        <BarIcon IconName="@("fa-computer")" />
                        @AppLocalization["Computers"]
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem To="/computers/search" Match="Match.Prefix"><Icon Name="IconName.Search" />@AppLocalization["Search Computers"]</BarDropdownItem>

                        <BarDropdownItem To="/computers/create" Match="Match.Prefix"><Icon Name="IconName.PlusCircle" />@AppLocalization["Create Computer"]</BarDropdownItem>




                    </BarDropdownMenu>
                </BarDropdown>



            </BarItem>

            <BarItem>
                <BarDropdown>
                    <BarDropdownToggle>

                        <BarIcon IconName="@("fa-folder")" />
                        @AppLocalization["OU"]
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <BarDropdownItem To="/ou/search" Match="Match.Prefix"><Icon Name="IconName.Search" />@AppLocalization["Search OUs"]</BarDropdownItem>

                        <BarDropdownItem To="/ou/create" Match="Match.Prefix"><Icon Name="IconName.FolderPlus" />@AppLocalization["Create OU"]</BarDropdownItem>




                    </BarDropdownMenu>
                </BarDropdown>




            </BarItem>

            *@



        </BarStart>
        <BarEnd Height="Height.Is100">
            @*
            <BarItem>
              
                <BarDropdown Visible=@(ScreenWidth>990)>
                    <BarDropdownToggle>

                        <BarIcon IconName="@("fa-solid fa-table-list")" />
                        @AppLocalization["TOC"]
                    </BarDropdownToggle>
                    <BarDropdownMenu>
                        <TOC/>

                       

                    </BarDropdownMenu>
                </BarDropdown>
                      



            </BarItem>  *@
        </BarEnd>
    </BarMenu>
</Bar>

@code {
    public enum Page {Index,Features,Download,ManualInstall,MSIInstall};
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    public int ScreenHeight { get; set; }
    public int ScreenWidth { get; set; }
    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        var dimension = await JSRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
        ScreenHeight = dimension.Height;
        ScreenWidth = dimension.Width;

        InvokeAsync(StateHasChanged);


    }

    public class WindowDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}
